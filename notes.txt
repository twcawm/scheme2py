note: combining regex can be tricky (most importantly, order matters)
for example:
tok.input is:
(+ 2 3)
 (+ 4 5) (+ .5 5.9)
when all we use is our number regex in isolation "\d*\.?\d+" , we get fine results:
lex element list:
['2', '3', '4', '5', '.5', '5.9']
but when we use this same number regex combined with the other regexes, we do not:
[\(\)\+\-]|[\w]+|\d*\.?\d+|"[^"\n]*"
lex element list:
['(', '+', '2', '3', ')', '(', '+', '4', '5', ')', '(', '+', '.5', '5', '.9', ')']

the 5.9 is incorrectly split into '5' and '.9', but only when the number regex is combined with OR | to the other regex.  this is confusing.

originally I tried to solve this is to use negative lookahead on the integer regex.

but I eventually found that the reason was completely different: 
the order in which I had combined the identifier and word regexes 
was the cause.  in particular, \w can match digits.  therefore \w 
was matching some decimal numbers, resulting in things like 5.9 being 
split into 5 and .9.  therefore I switched the order of identifier 
and word regexes in the combination.  my takeaway from this is that 
combining regexes into larger regexes is very tricky and error-prone.

also note:
technically in Scheme, an identifier is any "sequence of non-delimiter
characters that does not begin with either of the characters `#' or `,'
and is not syntactically a number"

procedures/ variadic arguments:
 in scheme, things like (+ 3 4 5) work, but not for all operators (e.g. expt)
 in python, things like operator.add(2, 3) can only take specified amounts of operands (2 in that case)
 so we would have to special-case the various python operators to handle these situations
 instead, I opted to just limit scheme mainly to python's number of operands for builtins,
   so e.g. (+ 2 4) would typically fail.
 but! for user-defined functions, there is no limitation!  so feel free to redefine such things! possibilities are endless!

previous note about numerical implementation (outdated since we have since supported true integer values): 
because of how we (previously) treat numerical values, (everything is a float!) this has some funny implications:
```
(begin (define a 1) (define b a) (eq? a b)) ; evals to True, as expected; b is just an alias for a
```
```
(begin (define a 1) (define b 1) (eq? a b)) ; evals to False, because a and b are both internally represented as floats; this corresponds to (eq? 1.0 1.0) in Scheme, which is also False, rather than (eq? 1 1) which is True...
```
```
(eq? 1 1) ; evals to False; corresponds to setting a = 1.0, b = 1.0, a is b in Python (with integers, in python, this would work!)
```
```
(equal? 1 1) ; evals to True; corresponds to setting a = 1.0, b = 1.0, a == b in Python
```

